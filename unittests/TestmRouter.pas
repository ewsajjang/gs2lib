unit TestmRouter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  mMsgRouter,
  System.SysUtils,
  DUnitX.TestFramework;

type
  // Test methods for class TRouter
  [TestFixture]
  TestTRouter = class
  strict private
    FRouter: TMsgRouter<Integer>;
  public
    [Setup]
    procedure SetUp;
    [TearDown]
    procedure TearDown;
  published
    [Test]
    procedure TestNotify;
    [Test]
    procedure TestNotifyWithData;
    [Test]
    procedure TestWithDatas;
    [Test]
    procedure TestRemoveHandler;
    [Test]
    procedure TestERouterMethodIDAlreadyExists;
    [Test]
    procedure TestExcute;
    [Test]
    procedure TestExcuteWithData;
    [Test]
    procedure TestData;
    [Test]
    procedure TestQueryResultObj;
    [Test]
    procedure TestQueryVarObj;
  end;

implementation

type
  TObj = class
    Excute: Boolean;
    constructor Create;
  end;

{ TObj }

constructor TObj.Create;
begin
  Excute := False;
end;

procedure TestTRouter.SetUp;
begin
  FRouter := TMsgRouter<Integer>.Create;
  FRouter.Clear;
end;

procedure TestTRouter.TearDown;
begin
  FRouter.Free;
  FRouter := nil;
end;

procedure TestTRouter.TestNotify;
var
  LExcute: Boolean;
begin
  LExcute := False;
  FRouter.On(0,
    procedure
    begin
      LExcute := True
    end);
  FRouter.Notify(0);
  Assert.IsTrue(LExcute);
end;

procedure TestTRouter.TestNotifyWithData;
var
  Data: TObj;
begin
  Data := TObj.Create;
  try
    FRouter.On(0,
      procedure
      begin
        FRouter.Data<TObj>.Excute := True;
      end);
    Assert.IsFalse(Data.Excute);
    FRouter.Notify(0, Data);
    Assert.IsTrue(Data.Excute);
  finally
    Data.Free;
  end;
end;

procedure TestTRouter.TestWithDatas;
var
  Data, Data2: TObj;
begin
  FRouter.On(0,
    procedure
    begin
        FRouter.Data<TObj>.Excute := True;
        FRouter.Data2<TObj>.Excute := True;
    end);
  Data := TObj.Create;
  Data2 := TObj.Create;
  try
    FRouter.Notify(0, Data, Data2);
    Assert.IsTrue(Data.Excute and Data2.Excute);
  finally
    Data.Free;
    Data2.Free;
  end;
end;

procedure TestTRouter.TestRemoveHandler;
var
  LExcute: Boolean;
  Proc: TProc;
begin
  LExcute := False;
  Proc :=
    procedure
    begin
      LExcute := True
    end;
  FRouter.On(0, Proc);
  FRouter.Notify(0);
  Assert.IsTrue(LExcute);

  LExcute := False;
  FRouter.RemoveHandler(0, Proc);
  Assert.IsFalse(LExcute);
end;

procedure TestTRouter.TestERouterMethodIDAlreadyExists;
begin
  FRouter.On(0, function: Boolean begin Result := True end);
  Assert.WillRaise(
    procedure
    begin
      FRouter.On(0, function: Boolean begin Result := False end);
    end,
    ERouterMethodIDAlreadyExists);
end;

procedure TestTRouter.TestExcute;
var
  LExcute: Boolean;
begin
  FRouter.On(0, function: Boolean begin Result := True end);
  LExcute := False;
  Assert.IsFalse(LExcute);
  LExcute := FRouter.Excute(0);
  Assert.IsTrue(LExcute);

  FRouter.RemoveHandler(0);
  FRouter.On(0, function: Boolean begin Result := False end);
  LExcute := FRouter.Excute(0);
  Assert.IsFalse(LExcute);
end;

procedure TestTRouter.TestExcuteWithData;
var
  Data: TObj;
begin
  Data := TObj.Create;
  try
    FRouter.On(0,
      function: Boolean
      begin
        Result := True;
        FRouter.Data<TObj>.Excute := Result;
      end);
    Assert.IsFalse(Data.Excute);
    Assert.IsTrue(FRouter.Excute(0, Data));
    Assert.IsTrue(Data.Excute);

    FRouter.RemoveHandler(0);
    FRouter.On(0,
      function: Boolean
      begin
        Result := False;
        FRouter.Data<TObj>.Excute := Result;
      end);
    Assert.IsFalse(FRouter.Excute(0, Data));
    Assert.IsFalse(Data.Excute);
  finally
    Data.Free;
  end;
end;

procedure TestTRouter.TestData;
var
  LObj2, LObj: TObj;
begin
  FRouter.Data<TObj>(TObj.Create);
  LObj := FRouter.Data<TObj>;
  Assert.IsFalse(LObj.Excute);
  FRouter.Data<TObj>.Excute := True;
  Assert.IsTrue(LObj.Excute);
  FreeAndNil(LObj);

  FRouter.Data2<TObj>(TObj.Create);
  LObj2 := FRouter.Data2<TObj>;
  Assert.IsFalse(LObj2.Excute);
  FRouter.Data2<TObj>.Excute := True;
  Assert.IsTrue(LObj2.Excute);
  FreeAndNil(LObj2);
end;

procedure TestTRouter.TestQueryResultObj;
var
  LObj: TObj;
begin
  FRouter.On<TObj>(0,
    function: TObj
    begin
      Result := TObj.Create;
      Result.Excute := True;
    end);
  LObj := FRouter.Query<TObj>(0);
  Assert.IsNotNull(LObj);
  Assert.IsTrue(LObj.Excute);
  FreeAndNil(LObj);
end;

procedure TestTRouter.TestQueryVarObj;
var
  LObj: TObj;
begin
  Assert.IsFalse(FRouter.Query<TObj>(0, LObj));
  FRouter.On<TObj>(0,
    function: TObj
    begin
      Result := TObj.Create;
      Result.Excute := True;
    end);
  Assert.IsTrue(FRouter.Query<TObj>(0, LObj));
  Assert.IsNotNull(LObj);
  Assert.IsTrue(LObj.Excute);
  FreeAndNil(LObj);
end;


initialization
  TDUnitX.RegisterTestFixture(TestTRouter);

end.
