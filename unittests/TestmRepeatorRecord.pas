unit TestmRepeatorRecord;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  mRepeator,
  System.Classes, System.SysUtils, System.Generics.Collections,
  DUnitX.TestFramework;

type
  // Test methods for class TSimpleRepeator
  TOrder = (oOne = 0, oTwo, oThree, oFour);

  [TestFixture]
  TestTSimpleRepeator = class
  strict private
    FRepeator: TSimpleRepeator<TOrder>;
  public
    [SetUp]
    procedure SetUp;
    [TearDown]
    procedure TearDown;
    [test]
    procedure TestInitAndCheckCount;
    [test]
    procedure TestInitAndCurrentValue;
    [test]
    procedure TestNext;
    [test]
    procedure TestNextAndCheckPostion;
    [test]
    procedure TestMovePosByIdx;
    [test]
    procedure TestMovePosBy;
    [test]
    procedure TestCurrentByPosition;
    [test]
    procedure TestEof;
    [test]
    procedure TestEofBySetPosition;
    [test]
    procedure TestEofByCallNext;
    [test]
    procedure TestAdd;
    [test]
    procedure TestAddSameItem;
    [test]
    procedure TestRemove;
    [test]
    procedure TestRemoveNotExists;
    [test]
    procedure TestExist;
    [test]
    procedure TestNotExist;
  end;

implementation

procedure TestTSimpleRepeator.SetUp;
begin
  FRepeator := TSimpleRepeator<TOrder>.Create;
end;

procedure TestTSimpleRepeator.TearDown;
begin
  FRepeator.Free;
  FRepeator := nil;
end;

procedure TestTSimpleRepeator.TestInitAndCheckCount;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  Assert.AreEqual(3, FRepeator.Count);
end;

procedure TestTSimpleRepeator.TestMovePosBy;
var
  ReturnValue: TOrder;
  i: Integer;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  for i := 0 to FRepeator.Count - 1 do
  begin
    FRepeator.PosBy := TOrder(i);
    ReturnValue := FRepeator.Current;
    Assert.IsTrue(TOrder(i) = ReturnValue);
  end;
end;

procedure TestTSimpleRepeator.TestMovePosByIdx;
var
  ReturnValue: TOrder;
  i: Integer;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  for i := 0 to FRepeator.Count - 1 do
  begin
    FRepeator.PosByIdx := i;
    ReturnValue := FRepeator.Current;
    Assert.IsTrue(TOrder(i) = ReturnValue);
  end;
end;

procedure TestTSimpleRepeator.TestNext;
var
  ReturnValue: TOrder;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  ReturnValue := FRepeator.Next;
  Assert.IsTrue(oTwo = ReturnValue);
end;

procedure TestTSimpleRepeator.TestNextAndCheckPostion;
var
  LItem: TOrder;
  ReturnValue: Integer;
begin
  FRepeator.Init([oOne, oTwo, oThree]);

  LItem := FRepeator.Next;
  ReturnValue := FRepeator.PosByIdx;
  Assert.AreEqual(Integer(LItem), ReturnValue);
  Assert.AreEqual(1, ReturnValue);
end;

procedure TestTSimpleRepeator.TestNotExist;
var
  LExists: Boolean;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  LExists := FRepeator.Exists(oFour);
  Assert.AreEqual<Boolean>(False, LExists);
end;

procedure TestTSimpleRepeator.TestRemove;
var
  LIdx: Integer;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  LIdx := FRepeator.Remove(oThree);
  Assert.AreEqual(2, LIdx);
end;

procedure TestTSimpleRepeator.TestRemoveNotExists;
var
  LIdx: Integer;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  LIdx := FRepeator.Remove(oFour);
  Assert.AreEqual(-1, LIdx);
end;

procedure TestTSimpleRepeator.TestInitAndCurrentValue;
var
  Return: TOrder;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  Return := FRepeator.Current;
  Assert.IsTrue(oOne = Return);
end;

procedure TestTSimpleRepeator.TestAdd;
var
  LCnt: Integer;
begin
  FRepeator.Init([oOne, oTwo]);
  LCnt := FRepeator.Add(oThree);
  Assert.AreEqual(2, LCnt);
end;

procedure TestTSimpleRepeator.TestAddSameItem;
var
  LCnt: Integer;
begin
  FRepeator.Init([oOne, oTwo]);
  LCnt := FRepeator.Add(oTwo);
  Assert.AreEqual(1, LCnt);
end;

procedure TestTSimpleRepeator.TestCurrentByPosition;
var
  i: Integer;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  for i := 0 to FRepeator.Count - 1 do
  begin
    FRepeator.PosByIdx := i;
    Assert.IsTrue(TOrder(i) = FRepeator.Current);
  end;
end;

procedure TestTSimpleRepeator.TestEof;
var
  ReturnValue: Boolean;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  ReturnValue := FRepeator.Eof;
  Assert.IsFalse(ReturnValue);
end;

procedure TestTSimpleRepeator.TestEofByCallNext;
var
  ReturnValue: Boolean;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  FRepeator.Next;
  FRepeator.Next;
  ReturnValue := FRepeator.Eof;
  Assert.IsTrue(ReturnValue);
end;

procedure TestTSimpleRepeator.TestEofBySetPosition;
var
  ReturnValue: Boolean;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  FRepeator.PosByIdx := FRepeator.Count - 1;
  ReturnValue := FRepeator.Eof;
  Assert.IsTrue(ReturnValue);
end;

procedure TestTSimpleRepeator.TestExist;
var
  LExists: Boolean;
begin
  FRepeator.Init([oOne, oTwo, oThree]);
  LExists := FRepeator.Exists(oOne);
  Assert.AreEqual<Boolean>(True, LExists);
end;

initialization
  TDUnitX.RegisterTestFixture(TestTSimpleRepeator);
end.
