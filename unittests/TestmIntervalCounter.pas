unit TestmIntervalCounter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  mIntervalCounter,
  TestFramework, System.Classes, System.Math, System.SysUtils;

type
  // Test methods for class TIntervalCounter
  TestTIntervalCounter = class(TTestCase)
  strict private
    FIntervalCnt: IIntervalCounter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestInit_Rnage_01_25;
    procedure TestInit_Rnage_01_01;
    procedure TestInit_Rnage_01_02;
    procedure TestInit_Rnage_03_25;
    procedure TestInit_EIntervalAssignedByZero;
    procedure TestInit_EIntervalAssignedByNegative;
    procedure TestInit_ERangeParamsAssignedByZero;
    procedure TestInit_ERangeParamsAssignedByNegative;
    procedure TestInit_ERangeParamsOutOfRange;
  end;

implementation

procedure TestTIntervalCounter.SetUp;
begin
  FIntervalCnt := TIntervalCounter.Create;
end;

procedure TestTIntervalCounter.TearDown;
begin
end;

procedure TestTIntervalCounter.TestInit_Rnage_01_25;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 1;
  AEnd := 25;
  AInterval := 12;

  FIntervalCnt.Init(AStart, AEnd, AInterval);

  CheckEquals(25,  FIntervalCnt.Range);
  CheckEquals( 3,  FIntervalCnt.Count); //1~12, 13~24, 25~25

  CheckEquals(12,  FIntervalCnt.IntervalRange[0]);
  CheckEquals(12,  FIntervalCnt.IntervalRange[1]);
  CheckEquals( 1,  FIntervalCnt.IntervalRange[2]);

  CheckEquals( 1,  FIntervalCnt.StrIdx[0]);
  CheckEquals(12,  FIntervalCnt.EndIdx[0]);
  CheckEquals(13,  FIntervalCnt.StrIdx[1]);
  CheckEquals(24,  FIntervalCnt.EndIdx[1]);
  CheckEquals(25,  FIntervalCnt.StrIdx[2]);
  CheckEquals(25,  FIntervalCnt.EndIdx[2]);
end;

procedure TestTIntervalCounter.TestInit_ERangeParamsAssignedByNegative;
begin
  ExpectedException := ERangeParamsAssignedByNegative;
  FIntervalCnt.Init(-1, 1, 0);
end;

procedure TestTIntervalCounter.TestInit_EIntervalAssignedByNegative;
begin
  ExpectedException := EIntervalAssignedByNegative;
  FIntervalCnt.Init(1, 1, -1);
end;

procedure TestTIntervalCounter.TestInit_EIntervalAssignedByZero;
begin
  ExpectedException := EIntervalAssignedByZero;
  FIntervalCnt.Init(1, 1, 0);
end;

procedure TestTIntervalCounter.TestInit_ERangeParamsAssignedByZero;
begin
  ExpectedException := ERangeParamsAssignedByZero;
  FIntervalCnt.Init(0, 1, 0);
end;

procedure TestTIntervalCounter.TestInit_ERangeParamsOutOfRange;
begin
  ExpectedException := ERangeParamsOutOfRange;
  FIntervalCnt.Init(2, 1, 0);
end;

procedure TestTIntervalCounter.TestInit_Rnage_01_01;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 1;
  AEnd := 1;
  AInterval := 12;

  FIntervalCnt.Init(AStart, AEnd, AInterval);

  CheckEquals(1,  FIntervalCnt.Range);
  CheckEquals(1,  FIntervalCnt.Count);

  CheckEquals(1,  FIntervalCnt.IntervalRange[0]);

  CheckEquals(1,  FIntervalCnt.StrIdx[0]);
  CheckEquals(1,  FIntervalCnt.EndIdx[0]);
end;

procedure TestTIntervalCounter.TestInit_Rnage_01_02;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 1;
  AEnd := 2;
  AInterval := 12;

  FIntervalCnt.Init(AStart, AEnd, AInterval);

  CheckEquals(2,  FIntervalCnt.Range);
  CheckEquals(1,  FIntervalCnt.Count);

  CheckEquals(2,  FIntervalCnt.IntervalRange[0]);

  CheckEquals(1,  FIntervalCnt.StrIdx[0]);
  CheckEquals(2,  FIntervalCnt.EndIdx[0]);
end;

procedure TestTIntervalCounter.TestInit_Rnage_03_25;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 3;
  AEnd := 25;
  AInterval := 12;

  FIntervalCnt.Init(AStart, AEnd, AInterval);

  CheckEquals(23,  FIntervalCnt.Range);
  CheckEquals(2,  FIntervalCnt.Count);

  CheckEquals(12,  FIntervalCnt.IntervalRange[0]);
  CheckEquals(11,  FIntervalCnt.IntervalRange[1]);

  CheckEquals(3,  FIntervalCnt.StrIdx[0]);
  CheckEquals(14,  FIntervalCnt.EndIdx[0]);
  CheckEquals(15,  FIntervalCnt.StrIdx[1]);
  CheckEquals(25,  FIntervalCnt.EndIdx[1]);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTIntervalCounter.Suite);
end.

