unit TestmIntervalCounter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  mIntervalCounter,
  System.Classes, System.Math, System.SysUtils,
  DUnitX.TestFramework;

type
  // Test methods for class TIntervalCounter
  TestTIntervalCounter = class
  strict private
    FIntervalCnt: IIntervalCounter;
  public
    [SetUp]
    procedure SetUp;
    [TearDown]
    procedure TearDown;
    [Test]
    procedure TestInit_Rnage_01_25;
    [Test]
    procedure TestInit_Rnage_01_01;
    [Test]
    procedure TestInit_Rnage_01_02;
    [Test]
    procedure TestInit_Rnage_03_25;
    [Test]
    procedure TestInit_EIntervalAssignedByZero;
    [Test]
    procedure TestInit_EIntervalAssignedByNegative;
    [Test]
    procedure TestInit_ERangeParamsAssignedByZero;
    [Test]
    procedure TestInit_ERangeParamsAssignedByNegative;
    [Test]
    procedure TestInit_ERangeParamsOutOfRange;
  end;

implementation

procedure TestTIntervalCounter.SetUp;
begin
  FIntervalCnt := TIntervalCounter.Create;
end;

procedure TestTIntervalCounter.TearDown;
begin
end;

procedure TestTIntervalCounter.TestInit_Rnage_01_25;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 1;
  AEnd := 25;
  AInterval := 12;

  FIntervalCnt.Interval := AInterval;
  FIntervalCnt.Init(AStart, AEnd);

  Assert.AreEqual(25,  FIntervalCnt.Range);
  Assert.AreEqual( 3,  FIntervalCnt.Count); //1~12, 13~24, 25~25

  Assert.AreEqual(12,  FIntervalCnt.IntervalRange[0]);
  Assert.AreEqual(12,  FIntervalCnt.IntervalRange[1]);
  Assert.AreEqual( 1,  FIntervalCnt.IntervalRange[2]);

  Assert.AreEqual( 1,  FIntervalCnt.StrIdx[0]);
  Assert.AreEqual(12,  FIntervalCnt.EndIdx[0]);
  Assert.AreEqual(13,  FIntervalCnt.StrIdx[1]);
  Assert.AreEqual(24,  FIntervalCnt.EndIdx[1]);
  Assert.AreEqual(25,  FIntervalCnt.StrIdx[2]);
  Assert.AreEqual(25,  FIntervalCnt.EndIdx[2]);
end;

procedure TestTIntervalCounter.TestInit_ERangeParamsAssignedByNegative;
begin
  FIntervalCnt.Interval := 1;
  Assert.WillRaise(
    procedure
    begin
      FIntervalCnt.Init(-1, 1);
    end,
    ERangeParamsAssignedByNegative);
end;

procedure TestTIntervalCounter.TestInit_EIntervalAssignedByNegative;
begin
  Assert.WillRaise(procedure
    begin
      FIntervalCnt.Interval := -1;
    end,
    EIntervalAssignedByNegative);
//  FIntervalCnt.Init(1, 1);
end;

procedure TestTIntervalCounter.TestInit_EIntervalAssignedByZero;
begin
  Assert.WillRaise(
    procedure
    begin
      FIntervalCnt.Interval := 0;
    end,
    EIntervalAssignedByZero);

//  FIntervalCnt.Init(1, 1);
end;

procedure TestTIntervalCounter.TestInit_ERangeParamsAssignedByZero;
begin
  FIntervalCnt.Interval := 1;
  Assert.WillRaise(
    procedure
    begin
      FIntervalCnt.Init(0, 1);
    end,
    ERangeParamsAssignedByZero);
end;

procedure TestTIntervalCounter.TestInit_ERangeParamsOutOfRange;
begin
  FIntervalCnt.Interval := 1;
  Assert.WillRaise(
    procedure
    begin
      FIntervalCnt.Init(2, 1);
    end,
    ERangeParamsOutOfRange);
end;

procedure TestTIntervalCounter.TestInit_Rnage_01_01;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 1;
  AEnd := 1;
  AInterval := 12;

  FIntervalCnt.Interval := AInterval;
  FIntervalCnt.Init(AStart, AEnd);

  Assert.AreEqual(1,  FIntervalCnt.Range);
  Assert.AreEqual(1,  FIntervalCnt.Count);

  Assert.AreEqual(1,  FIntervalCnt.IntervalRange[0]);

  Assert.AreEqual(1,  FIntervalCnt.StrIdx[0]);
  Assert.AreEqual(1,  FIntervalCnt.EndIdx[0]);
end;

procedure TestTIntervalCounter.TestInit_Rnage_01_02;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 1;
  AEnd := 2;
  AInterval := 12;

  FIntervalCnt.Interval := AInterval;
  FIntervalCnt.Init(AStart, AEnd);

  Assert.AreEqual(2,  FIntervalCnt.Range);
  Assert.AreEqual(1,  FIntervalCnt.Count);

  Assert.AreEqual(2,  FIntervalCnt.IntervalRange[0]);

  Assert.AreEqual(1,  FIntervalCnt.StrIdx[0]);
  Assert.AreEqual(2,  FIntervalCnt.EndIdx[0]);
end;

procedure TestTIntervalCounter.TestInit_Rnage_03_25;
var
  AInterval: Integer;
  AEnd: Integer;
  AStart: Integer;
begin
  AStart := 3;
  AEnd := 25;
  AInterval := 12;

  FIntervalCnt.Interval := AInterval;
  FIntervalCnt.Init(AStart, AEnd);

  Assert.AreEqual(23,  FIntervalCnt.Range);
  Assert.AreEqual(2,  FIntervalCnt.Count);

  Assert.AreEqual(12,  FIntervalCnt.IntervalRange[0]);
  Assert.AreEqual(11,  FIntervalCnt.IntervalRange[1]);

  Assert.AreEqual(3,  FIntervalCnt.StrIdx[0]);
  Assert.AreEqual(14,  FIntervalCnt.EndIdx[0]);
  Assert.AreEqual(15,  FIntervalCnt.StrIdx[1]);
  Assert.AreEqual(25,  FIntervalCnt.EndIdx[1]);
end;

initialization
  // Register any test cases with the test runner
  TDUnitX.RegisterTestFixture(TestTIntervalCounter);
end.

